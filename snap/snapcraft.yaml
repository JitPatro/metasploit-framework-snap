name: metasploit-framework
base: core24
adopt-info: metasploit-framework
summary: The Metasploit Framework
description: |
  The **Metasploit Framework** (MSF) is far more than just a collection of exploitsâ€“it is also a solid foundation that you can build upon and easily customize to meet your needs. This allows you to concentrate on your unique target environment and not have to reinvent the wheel. MSF is considered to be one of the single most useful security auditing tools freely available to security professionals today. From a wide array of commercial grade exploits and an extensive exploit development environment, all the way to network information gathering tools and web vulnerability plugins, the Metasploit Framework provides a truly impressive work environment.

  Installation: `snap install metasploit-framework`

  How to use: https://www.offensive-security.com/metasploit-unleashed/

  Issues: https://github.com/JitPatro/metasploit-framework/issues

grade: stable
confinement: strict

platforms:
  amd64:
    build-on: [amd64]
  arm64:
    build-on: [arm64]
  armhf:
    build-on: [armhf]


environment:
  LANG: C.UTF-8
  LC_ALL: C.UTF-8
  PATH: "$SNAP/opt/metasploit-framework/bin:$SNAP/opt/metasploit-framework/embedded/bin:$SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$PATH"
  LD_LIBRARY_PATH: "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$SNAP/lib:$SNAP/usr/lib:$SNAP/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR:$SNAP/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR:$SNAP/opt/metasploit-framework/embedded/lib"
  TERMINFO: $SNAP/opt/metasploit-framework/embedded/share/terminfo
  EDITOR: vi
  HOME: $SNAP_USER_COMMON
  TEMPDIR: $SNAP_USER_COMMON
  TMPDIR: $SNAP_USER_COMMON
  TEMP: $SNAP_USER_COMMON
  TMP: $SNAP_USER_COMMON

slots:
  metasploit:
    interface: content
    content: executables
    source:
      read:
        - $SNAP/opt


apps:
  msfconsole:
    command: opt/metasploit-framework/bin/msfconsole
    plugs: [home, network, network-bind, network-control, desktop]

  msfbinscan:
    command: opt/metasploit-framework/bin/msfbinscan
    plugs: [home]

  msfelfscan:
    command: opt/metasploit-framework/bin/msfelfscan
    plugs: [home]

  msfmachscan:
    command: opt/metasploit-framework/bin/msfmachscan
    plugs: [home]

  msfpescan:
    command: opt/metasploit-framework/bin/msfpescan
    plugs: [home]

  msfrop:
    command: opt/metasploit-framework/bin/msfrop
    plugs: [home]

  msfvenom:
    command: opt/metasploit-framework/bin/msfvenom
    plugs: [home, network]

  msfrpc:
    command: opt/metasploit-framework/bin/msfrpc
    plugs: [network]

  msfrpcd:
    command: opt/metasploit-framework/bin/msfrpcd
    plugs: [home, network, network-bind]

  msfd:
    command: opt/metasploit-framework/bin/msfd
    plugs: [network, network-bind]

  msfdb:
    command: opt/metasploit-framework/bin/msfdb
    plugs: [network, network-bind, home]

  msfupdate:
    command: opt/metasploit-framework/bin/msfupdate

lint:
  ignore:
    - library
    
package-repositories:
  - type: apt
    formats: [deb]
    suites: [lucid]
    components: [main]
    key-id: 97B32012EA1176F053727A95C048F0B49DEEC457
    url: http://downloads.metasploit.com/data/releases/metasploit-framework/apt
    architectures: [amd64, arm64, armhf]


parts:

  nmap:
    source: https://nmap.org/dist/nmap-7.95.tgz
    plugin: make
    build-packages: [automake, build-essential, libssl-dev, python3-setuptools, upx-ucl]

    override-build: |
      if [ `arch` != "armv7l" ]
      then
        ./configure --with-libpcap=included --with-libpcre=included --without-nping --without-ncat --without-zenmap --prefix=${CRAFT_PART_INSTALL}
        sed -i 's/OPENSSL_LIBS = -lssl -lcrypto/OPENSSL_LIBS = -lssl -lcrypto -lpthread/g' ./Makefile
        make static
        make install
        cd ${CRAFT_PART_INSTALL}/bin; strip ./nmap; upx -9 ./nmap
      else
        echo "Build fails on armhf. Skipping..."
      fi

  metasploit-framework:
    plugin: nil
    stage-packages: [metasploit-framework, libfuse2t64, libncursesw6, libtinfo6, busybox]
    override-stage: |
      craftctl default
      sed -i 's#SCRIPTDIR=/opt#SCRIPTDIR=$SNAP/opt#g' ${CRAFT_STAGE}/opt/metasploit-framework/bin/*
      sed -i 's#INSTALL_DIR="/opt#INSTALL_DIR="$SNAP/opt#g' ${CRAFT_STAGE}/opt/metasploit-framework/bin/msfdb
      sed -i "s/'google-chrome'/'xdg-open', 'google-chrome'/g" ${CRAFT_STAGE}/opt/metasploit-framework/embedded/lib/ruby/gems/3.*/gems/rex-core-*/lib/rex/compat.rb
      sed -i "s#/opt/metasploit-framework/embedded/bin/ruby#/usr/bin/env ruby#g" ${CRAFT_STAGE}/opt/metasploit-framework/embedded/bin/*
      sed -i '/DEVELOPER_TIPS = \[/,+5d' ${CRAFT_STAGE}/opt/metasploit-framework/embedded/framework/lib/msf/ui/tip.rb
      sed -i 's/ALL_TIPS = COMMON_TIPS + DEVELOPER_TIPS/ALL_TIPS = COMMON_TIPS/g' ${CRAFT_STAGE}/opt/metasploit-framework/embedded/framework/lib/msf/ui/tip.rb
      sed -i 's/#{$0}/msfvenom/g' ${CRAFT_STAGE}/opt/metasploit-framework/embedded/framework/msfvenom
      echo -e '#!/bin/sh\n\nset -e\n\necho "msfupdate is no longer supported when Metasploit is installed as a snap package.\nPlease use:- snap refresh metasploit-framework"' > ${CRAFT_STAGE}/opt/metasploit-framework/bin/msfupdate
      craftctl set version=$(cd ../parts/metasploit-framework/stage_packages/ && ls metasploit* | awk -F_ '{ printf $2 }' | awk -F~ '{ printf "v"$1"-dev" }')

    override-prime: |
      craftctl default
      mkdir -p ${CRAFT_PRIME}/bin
      cd ${CRAFT_PRIME}/usr/bin; for binary in {awk,cat,chmod,chown,clear,cp,cut,date,diff,echo,find,grep,head,hexdump,ip,ls,mkdir,mv,netstat,nslookup,ps,pwd,rm,sed,sleep,sort,tail,tar,tee,touch,tr,vi,wc,wget,which,whoami,xxd}; do ln -sf busybox $binary; done
